num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num radius = 3;
num yTranslate = -5;

str capBlock = "minecraft:red_mushroom_block";
str stemBlock = "minecraft:mushroom_stem";

num warp = 0.5;
for (num x = -radius; x < radius; x = x + 1) {
    for (num y = -radius; y < radius+1; y = y + 1) {
        for (num z = -radius; z < radius; z = z + 1) {
            // First if statement determines the outside border of buble
            // Second if statement determines the inside border of buble

            if (pow(x,2)+pow(y,2)+pow(z,2) < pow(radius,2) &&
            pow(x,2)+pow(y,2)+pow(z,2) > ((pow(radius,2))/3)  &&
            y > -radius/2) {
                
            block(x, y+yTranslate, z, capBlock, true);
            }
        }   
    }   
}

num amount = 10;

str setBlock = "";
for (num a = 0; a < amount; a = a + 1) {

    num length = 1;
    
    num droop = -0.03;
    num verticalDirection = -0.5-randomInt(randPrecision)/randPrecision;
    num angle = randomInt(randPrecision)/randPrecision*2*pi;

    // Branch direction vector
    num dx = sin(angle);
    num dy = verticalDirection;
    num dz = cos(angle);
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;

    for (num l = 0; l <= length; l = l + 0.1) {

        num cx = l*dx;
        num cy = l*dy;
        num cz = l*dz;
        
        num r = radius;


        block(cx, cy+yTranslate, cz, stemBlock, true);             
                
        // Point vector down more
        dy = dy - droop;
        // Normalize vector
        mag = sqrt(pow2(dx)+pow2(dy)+pow2(dz));
        dx = dx/mag;
        dy = dy/mag;
        dz = dz/mag;
    }

    angle = angle + goldenAngle;
}


